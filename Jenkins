pipeline {
    agent any
    
    
    environment {
        scannerHome = tool name: 'SonarQubeScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
        dockerImage = 'sample-application' 
    }

    stages {
        stage('Hello') {
            steps {
                git branch: 'main', credentialsId: '0624aec4-a7b0-4836-8bf4-72790db4d4e9', url: 'https://github.com/kavinraj2k/FlaskUsingpipeline.git'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    withSonarQubeEnv('SonarQube') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=my_project_key \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=http://localhost:9000
                        """
                    }
                }
            }
            post {
                failure {
                    emailext subject: "SonarQube Analysis Failed: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                             body: "SonarQube analysis failed for ${env.JOB_NAME} [${env.BUILD_NUMBER}]. Please investigate.",
                             to: 'rskavinraj12345@gmail.com'
                }
            }
        }
        stage('Stop and Remove Old Containers') {
            steps {
                script {
                    def isContainerRunning = sh(returnStatus: true, script: 'docker inspect -f {{.State.Running}} sample-flask-application 2>/dev/null') == 0
                    if (isContainerRunning) {
                        sh 'docker stop sample-flask-application'
                    } else {
                        echo 'No running container found. Skipping stop and remove step.'
                    }
                }
            }
        }
        
        stage('Remove Old Docker Image') {
            steps {
                script {
                    sh 'docker rmi -f $(docker images -q sample-application) || true'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${dockerImage}:${env.BUILD_NUMBER} ."
                }
            }
        }
        
        stage('Security Scan with Trivy') {
            steps {
                script {
                    def dockerImageName = "${dockerImage}:${env.BUILD_NUMBER}"
                    def trivyReportJson = sh(script: "trivy --format=json --output=/tmp/trivy-report.json ${dockerImageName}", returnStdout: true).trim()
                    def trivyReportTable = sh(script: "trivy --format=table ${dockerImageName}", returnStdout: true).trim()

                    emailext subject: "Trivy Security Scan Report: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                             body: "Trivy security scan completed for ${env.JOB_NAME} [${env.BUILD_NUMBER}]. No critical vulnerabilities found.\n\nJSON Report:\n${trivyReportJson}\n\nTable Report:\n${trivyReportTable}",
                             to: 'rskavinraj12345@gmail.com',
                             attachmentsPattern: '/tmp/trivy-report.json'
                }
            }
        } 
        
        stage('Deploy Docker Container') {
            steps {
                script {
                    def dockerImageName = "${dockerImage}:${env.BUILD_NUMBER}"
                    sh "docker run -d --rm --name sample-flask-application -p 8000:8000 ${dockerImageName}"
                }
            }
        }
        
        stage('Monitor') {
            steps {
                script {
                    sh 'curl -X POST http://18.181.181.79:9090/-/reload'
                }
            }
        }
        
    }
}

