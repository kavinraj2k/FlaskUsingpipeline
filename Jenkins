pipeline {
    agent any
    
    environment {
        scannerHome = tool name: 'SonarQubeScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
        dockerImage = 'sample-application'  // Name of your Docker image
    }

    stages {
        stage('Hello') {
            steps {
                // Checkout the code from GitHub
                git branch: 'main', credentialsId: '6bbab09d-4b2c-4fe5-a02e-f1e027e1b94e', url: 'https://github.com/kavinraj2k/FlaskUsingpipeline.git'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                // Run SonarQube analysis
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    withSonarQubeEnv('SonarQube') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=my_project_key \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=http://localhost:9000
                        """
                    }
                }
            }
            post {
                failure {
                    // Send email notification on SonarQube analysis failure
                    emailext subject: "SonarQube Analysis Failed: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                             body: "SonarQube analysis failed for ${env.JOB_NAME} [${env.BUILD_NUMBER}]. Please investigate.",
                             to: 'rskavinraj12345@gmail.com'
                }
            }
        }
        stage('Stop and Remove Old Containers') {
            steps {
                script {
                    sh 'docker stop sample-flask-application'
                }
            }
        }
        
        stage('Remove Old Docker Image') {
            steps {
                script {
                    // Remove old Docker image forcefully
                    sh 'docker rmi -f $(docker images -q sample-application) || true'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                // Build Docker image
                script {
                       sh " docker build -t ${dockerImage}:${env.BUILD_NUMBER} ."
                }
            }
        }
        
        stage('Security Scan with Trivy') {
            steps {
                script {
                    // Run Trivy security scan on the Docker image
                    def dockerImageName = "${dockerImage}:${env.BUILD_NUMBER}"
                    sh "trivy ${dockerImageName}"
                }
            }
            post {
                success {
                    // Send email notification on successful Trivy scan
                    emailext subject: "Trivy Security Scan Succeeded: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                             body: "Trivy security scan completed successfully for ${env.JOB_NAME} [${env.BUILD_NUMBER}]. No critical vulnerabilities found.",
                             to: 'rskavinraj12345@gmail.com'
                }
            }
        }
        
        stage('Deploy Docker Container') {
            steps {
                // Deploy Docker container
                script {
                    def dockerImageName = "${dockerImage}:${env.BUILD_NUMBER}"
                    sh "docker run -d --rm --name sample-flask-application -p 8000:8000 ${dockerImageName}"
                }
            }
        }
    }
    
    // Global post section for common post-build actions
    post {
        always {
            // Clean up actions, notifications, etc.
            script {
                echo "Pipeline finished"
            }
        }
    }
}
